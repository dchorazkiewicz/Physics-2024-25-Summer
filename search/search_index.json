{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Physics 2024/25 Summer","text":"<p>This is the course website for Physics 2024/25 Summer. Here you will find all the information you need for the course, including the syllabus, schedule, and assignments.</p>"},{"location":"Electromagnetism/Electromagnetism/","title":"Electromangetism","text":""},{"location":"Electromagnetism/Kirchhoff_laws/","title":"Circuit Analysis Using Graph Theory and Kirchhoff's Laws","text":""},{"location":"Electromagnetism/Kirchhoff_laws/#overview","title":"Overview","text":"<p>Analyzing electrical circuits is a fundamental task in understanding and designing modern systems. Kirchhoff's laws\u2014Kirchhoff's Current Law (KCL) and Kirchhoff's Voltage Law (KVL)\u2014provide a systematic approach to determining current and voltage distributions in complex networks. </p> <p>Graph theory offers a powerful tool for automating this process by representing circuits as graphs, where:</p> <ul> <li>Nodes correspond to junctions.</li> <li>Edges represent electrical components (e.g., resistors, capacitors, inductors, or voltage sources).</li> </ul> <p>This approach simplifies the formulation and solution of Kirchhoff's equations, paving the way for efficient analysis of even the most intricate circuits.</p>"},{"location":"Electromagnetism/Kirchhoff_laws/#key-concepts","title":"Key Concepts","text":"<p>1 Graph Representation of Circuits:</p> <ul> <li>Nodes represent junctions in the circuit.</li> <li>Edges are weighted with component values such as resistance, capacitance, or inductance.</li> </ul> <p>2 Kirchhoff's Laws:</p> <ul> <li>KCL (Current Conservation): The sum of currents entering a node equals the sum of currents leaving the node:      $$ \\sum I_\\text{in} = \\sum I_\\text{out} $$</li> <li>KVL (Voltage Conservation): The sum of voltage drops in a closed loop equals zero:      $$ \\sum V = 0 $$</li> </ul> <p>3 Algorithm Steps:</p> <ul> <li>Identify nodes and edges in the circuit graph.</li> <li>Traverse the graph to identify loops and branches.</li> <li>Formulate equations based on KCL and KVL.</li> <li>Solve the resulting system of equations to find unknown currents and voltages.</li> </ul>"},{"location":"Electromagnetism/Kirchhoff_laws/#implementation-outline","title":"Implementation Outline","text":"<p>1 Input: </p> <ul> <li>A circuit graph with nodes and edges annotated with component values.</li> </ul> <p>2 Process:</p> <ul> <li>Use graph traversal techniques (e.g., DFS or BFS) to:<ul> <li>Identify all nodes and loops in the graph.</li> <li>Associate components with their respective edges.</li> </ul> </li> <li>Formulate KCL equations for each node.</li> <li>Formulate KVL equations for each loop.</li> </ul> <p>3 Output:</p> <ul> <li>The system of equations derived from the circuit graph.</li> <li>Solved values for all unknown currents and voltages.</li> </ul> <p>4 Testing Examples:</p> <ul> <li>Simple circuits with a single loop.</li> <li>Multi-loop circuits with resistors and voltage sources.</li> <li>Complex networks including dependent and independent sources.</li> </ul>"},{"location":"Electromagnetism/Kirchhoff_laws/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Automating Circuit Analysis: Graph theory enables systematic and scalable methods for analyzing circuits, reducing reliance on manual equation formulation.</p> </li> <li> <p>Complexity Handling: This method efficiently handles nested loops, multiple sources, and a variety of component types.</p> </li> <li> <p>Cross-Disciplinary Relevance: The approach demonstrates the intersection of electrical engineering, computer science, and mathematics.</p> </li> </ol> <p>Circuit analysis using graph theory and Kirchhoff's laws is a modern and efficient approach to tackling complex networks. Implement this algorithm and explore its potential to simplify and enhance your understanding of electrical systems!</p>"},{"location":"Electromagnetism/rlc_circuit/","title":"RLC Circuit","text":""},{"location":"Exercises_for_Students/exercises/","title":"Exercises","text":""},{"location":"Exercises_for_Students/exercises/#mechanics","title":"Mechanics","text":""},{"location":"Exercises_for_Students/exercises/#problem-1","title":"Problem 1","text":"<p>Discuss the problem of projectile motion. Investigate the dependence of the range on the angle of projection.</p>"},{"location":"Exercises_for_Students/exercises/#problem-2","title":"Problem 2","text":"<p>Analyze the dynamics of a damped pendulum.</p>"},{"location":"Exercises_for_Students/exercises/#gravity","title":"Gravity","text":""},{"location":"Exercises_for_Students/exercises/#problem-1_1","title":"Problem 1","text":"<p>Analyze the relationship between the square of the orbital period and the cube of the orbital radius in circular motion, and discuss its implications for astronomy.</p>"},{"location":"Exercises_for_Students/exercises/#problem-2_1","title":"Problem 2","text":"<p>Discuss the concept of escape velocities. Define and analyze the first, second, and third cosmic velocities, and their importance in space exploration.</p>"},{"location":"Exercises_for_Students/exercises/#problem-3","title":"Problem 3","text":"<p>Analyze the concept of gravitational slingshot (gravity assist). Explain how spacecraft can use the gravity of celestial bodies to change their trajectory and velocity. Discuss its practical applications in interplanetary missions.</p>"},{"location":"Exercises_for_Students/exercises/#waves","title":"Waves","text":"<p>Describe the difference between transverse and longitudinal waves, as well as the relationship between wave velocity, frequency, and wavelength. Show three interesting examples of adding of waves with various wavelenghts and amplitudes. Can two speakers can produce a silence?</p> <p>Describe the Doppler Effect for the observed frequency in terms of the velocities of the source and observer. Demonstate various configurations of waves Doppler Effect.</p>"},{"location":"Exercises_for_Students/exercises/#electricity-and-magnetism","title":"Electricity and Magnetism","text":"<p>Examine the concept of an electric field. Describe the principle of superposition for electric fields and illustrate it with an example involving multiple point charges.</p> <p>Analyze the relationship between electric potential and electric field. Derive the expression for the electric field as the gradient of the potential and discuss its physical implications.</p> <p>Investigate the Lorentz force acting on a charged particle in both electric and magnetic fields. Explain the equation for the force and discuss its applications, such as in cyclotrons and mass spectrometers.</p> <p>Analyze the relationship between electric currents and magnetic fields. Derive the expression for the magnetic field produced by a current-carrying wire. Describe the forces appearing on a current-carrying wires going in the same or opposite directions. Exlain the right-hand rule, Lenz's Law, and the Biot-Savart Law.</p> <p>Discuss the principles of electromagnetic induction. Derive Faraday's Law and explain its practical applications, such as in electric generators and transformers.</p> <p>Examine Maxwell's equations. Highlight their significance in unifying electricity and magnetism and their role in predicting the existence of electromagnetic waves.</p>"},{"location":"Exercises_for_Students/exercises/#circuits","title":"Circuits","text":"<ul> <li> <p>Describe difference between series and parallel circuits applied to restitors and capacitors. Using some example complex circuits, demonstrate how to simplify it into a single equivalent value of resistor or capacitor using series-parallel transformations. Is there possible algorithm for computing equivalent resistance or capacitance? </p> </li> <li> <p>Describe Kirchhoff\u2019s Current Law (KCL) and Voltage Law (KVL). Solve a circuit problem involving multiple loops and junctions, illustrating the use of these laws.</p> </li> <li> <p>Analyze the time evolution of current \\(I(t)\\) and voltage in RL and RC and RLC circuits.</p> </li> </ul> <p>Using Ohm\u2019s Law, analyze the relationship between voltage, current, and resistance.</p> <p>Explain the working principles of capacitors and inductors. Derive the formulas for total capacitance and inductance in series and parallel circuits, and discuss their applications in electronic devices.</p> <p>Explain the differences between Alternating Current (AC) and Direct Current (DC). Derive the formulas for root mean square (RMS) voltage and current, and discuss their significance in AC circuits.</p> <p>Analyze the concept of the PN junction in semiconductors. Describe the formation of the depletion zone and its role in controlling current flow.</p> <p>Explain the working principles of diodes and transistors. Discuss the differences between NPN and PNP transistors and their applications in amplification and switching circuits.</p> <p>Give the formulas for impedance in resistive, inductive, and capacitive elements, and analyze their behavior in series and parallel configurations.</p> <p>Analyze the concept of electrical resonance in RLC circuits. Derive the formula for the resonant frequency and discuss the behavior of current and voltage at resonance.</p>"},{"location":"Exercises_for_Students/exercises/#measurements","title":"Measurements","text":"<p>Examine the principles of measurement systems. Discuss the concepts of accuracy, precision, and resolution, and analyze the sources of errors in measurements.</p> <ul> <li>Discuss the concept of total uncertainty in measurements using total derivative method. Analyze the methods for combining uncertainties in measurements and calculating the overall uncertainty of a result. Demonstrate it by computing resistance using by ammeter and voltmeter.</li> </ul>"},{"location":"Exercises_for_Students/exercises/#statistics","title":"Statistics","text":"<p>Discuss the concepts of mean, median, standard deviation and variance as measures of dispersion in data analysis. Provide the formulas for calculating these statistical parameters and discuss their significance.</p> <p>Discuss the graphical representation of data using histograms, box plots, and scatter plots and error bars. Analyze the characteristics of these plots and their applications in visualizing data distributions and relationships.</p> <p>Analyze the principles of linear regression in data analysis. Derive the formula for the regression line and discuss its use in predicting the values of dependent variables based on independent variables.</p>"},{"location":"Exercises_for_Students/exercises/#modern-physics-i","title":"Modern Physics I","text":"<p>Analyze the life cycle of stars, starting from their formation in nebulae to their evolution into white dwarfs, neutron stars, or black holes. Discuss the role of nuclear fusion in powering stars and the processes of stellar nucleosynthesis.</p> <p>Discuss the principles of special relativity, focusing on the concepts of constant light speed, time dilation and length contraction. Derive the formulas for these phenomena and discuss their applications, such as GPS satellite systems and muon decay.</p> <p>Describe the Lorentz transformation equations, and explain how they relate space and time coordinates between inertial frames moving at relativistic speeds.</p> <p>Use Hubble's Law to calculate the velocity of a galaxy located 200 megaparsecs (Mpc) away, assuming a Hubble constant of 70 km/s/Mpc.</p> <p>Explain the Big Bang Theory and its key evidence, including the Cosmic Microwave Background (CMB) radiation. Discuss the significance of primordial nucleosynthesis in explaining the abundance of light elements in the universe.</p>"},{"location":"Exercises_for_Students/exercises/#modern-physics-ii","title":"Modern Physics II","text":"<p>Discuss the Bohr model of the atom and its application to the hydrogen spectrum. Give the expression for the quantized energy levels of the hydrogen atom and explain the significance of the Rydberg formula.</p> <p>P: Find all colors of light emitted by hydrogen atom when electron transitions from higher energy level to lower energy level (hint: there are 4 possible transitions).</p> <p>Describe the phenomenon of wave-particle duality. Use Young's Double-Slit Experiment to illustrate how particles such as electrons exhibit both wave-like and particle-like behavior.</p> <p>Explain the Heisenberg Uncertainty Principle and discuss its implications for the simultaneous measurement of position and momentum. Provide an example demonstrating the calculation of uncertainty in momentum when the uncertainty in position is known.</p> <p>Discuss the principles of quantum mechanics, including wave functions, probability amplitudes, and the Schr\u00f6dinger equation.</p> <p>Analyze the behavior of particles in potential wells and barriers, and explain the concept of quantum tunneling. Explain the concept of wavefunction normalization. For a given wavefunction \\(\\psi(x) = A e^{-x^2}\\), determine the normalization constant \\(A\\) over the range \\(x \\in (-\\infty, \\infty)\\) and in another range \\(x \\in (-L,L)\\).</p> <p>Analyze the wave functions and the quantization of energy levels in a one-dimensional infinite potential well.</p> <p>Describe the concept of radioactive decay and three types of decay processes: alpha, beta, and gamma decay.</p> <p>Describe the decay rates and half-lives of radioactive isotopes.</p> <p>Discuss the Standard Model of particle physics. Describe the fundamental particles and forces in the model.</p>"},{"location":"Exercises_for_Students/exercises_dch/","title":"\ud83e\udd14 Problem list","text":""},{"location":"Exercises_for_Students/exercises_dch/#mechanics","title":"Mechanics","text":""},{"location":"Exercises_for_Students/exercises_dch/#problem-1","title":"Problem 1","text":"<p>Investigating the Range as a Function of the Angle of Projection</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation","title":"Motivation:","text":"<p>Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful.</p> <p>What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task","title":"Task:","text":"<p>1 Theoretical Foundation:</p> <ul> <li>Begin by deriving the governing equations of motion from fundamental principles. This involves solving a basic differential equation to establish the general form of the motion.</li> <li>Highlight how variations in initial conditions lead to a family of solutions.</li> </ul> <p>2 Analysis of the Range:</p> <ul> <li>Investigate how the horizontal range depends on the angle of projection.</li> <li>Discuss how changes in other parameters, such as initial velocity and gravitational acceleration, influence the relationship.</li> </ul> <p>3 Practical Applications:</p> <ul> <li>Reflect on how this model can be adapted to describe various real-world situations, such as projectiles launched on uneven terrain or in the presence of air resistance.</li> </ul> <p>4 Implementation:</p> <ul> <li>Develop a computational tool or algorithm to simulate projectile motion.</li> <li>Visualize the range as a function of the angle of projection for different sets of initial conditions.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#deliverables","title":"Deliverables:","text":"<ol> <li>A detailed description of the family of solutions derived from the governing equations.</li> <li>Graphical representations of the range versus angle of projection, highlighting how different parameters influence the curve.</li> <li>A discussion on the limitations of the idealized model and suggestions for incorporating more realistic factors, such as drag or wind.</li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#hints-and-resources","title":"Hints and Resources:","text":"<ul> <li>Start from the fundamental laws of motion and gradually build the general solution.</li> <li>Use numerical methods or simulation tools to explore scenarios that go beyond simple analytical solutions.</li> <li>Consider how this model connects to real-world systems, such as sports, engineering, and astrophysics.</li> </ul> <p>This task encourages a deep understanding of projectile motion while showcasing its versatility and applicability across various domains.</p>"},{"location":"Exercises_for_Students/exercises_dch/#problem-2","title":"Problem 2","text":"<p>Investigating the Dynamics of a Forced Damped Pendulum</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_1","title":"Motivation:","text":"<p>The forced damped pendulum is a captivating example of a physical system with intricate behavior resulting from the interplay of damping, restoring forces, and external driving forces. By introducing both damping and external periodic forcing, the system demonstrates a transition from simple harmonic motion to a rich spectrum of dynamics, including resonance, chaos, and quasiperiodic behavior. These phenomena serve as a foundation for understanding complex real-world systems, such as driven oscillators, climate systems, and mechanical structures under periodic stress.</p> <p>Adding forcing introduces new parameters, such as the amplitude and frequency of the external force, which significantly affect the pendulum's behavior. By systematically varying these parameters, a diverse class of solutions can be observed, including synchronized oscillations, chaotic motion, and resonance phenomena. These behaviors not only highlight fundamental physics principles but also provide insights into engineering applications such as energy harvesting, vibration isolation, and mechanical resonance.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task_1","title":"Task:","text":"<p>1 Theoretical Foundation:</p> <ul> <li> <p>Start with the differential equation governing the motion of a forced damped pendulum:</p> <p>\\(\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t)\\)</p> </li> <li> <p>Derive the approximate solutions for small-angle oscillations.</p> </li> <li>Explore resonance conditions and their implications for the system's energy.</li> </ul> <p>2 Analysis of Dynamics:</p> <ul> <li>Investigate how the damping coefficient, driving amplitude, and driving frequency influence the motion of the pendulum.</li> <li>Examine the transition between regular and chaotic motion and their physical interpretations.</li> </ul> <p>3 Practical Applications:</p> <ul> <li>Discuss real-world scenarios where the forced damped pendulum model applies, such as in energy harvesting devices, suspension bridges, and oscillating circuits.</li> </ul> <p>4 Implementation:</p> <ul> <li>Create a computational model to simulate the motion of a forced damped pendulum.</li> <li>Visualize the behavior under various damping, driving force, and initial conditions.</li> <li>Plot phase diagrams and Poincar\u00e9 sections to illustrate transitions to chaos.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#deliverables_1","title":"Deliverables:","text":"<ol> <li>A detailed explanation of the general solutions for the forced damped pendulum.</li> <li>Graphical representations of the motion for different damping coefficients, driving amplitudes, and driving frequencies, including resonance and chaotic behavior.</li> <li>A discussion on the limitations of the model and potential extensions, such as introducing nonlinear damping or non-periodic driving forces.</li> <li>Phase portraits, Poincar\u00e9 sections, and bifurcation diagrams to analyze transitions to complex dynamics.</li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#hints-and-resources_1","title":"Hints and Resources:","text":"<ul> <li>For small angles, approximate \\(\\sin\\theta \\approx \\theta\\) to simplify the differential equation.</li> <li>Employ numerical techniques (e.g., Runge-Kutta methods) for exploring the dynamics beyond the small-angle approximation.</li> <li>Relate the forced damped pendulum to analogous systems in other fields, such as electrical circuits (driven RLC circuits) or biomechanics (human gait).</li> <li>Utilize software tools like Python, MATLAB, or Mathematica for simulations and visualizations.</li> </ul> <p>This task bridges theoretical analysis with computational exploration, fostering a deeper understanding of forced and damped oscillatory phenomena and their implications in both physics and engineering.</p>"},{"location":"Exercises_for_Students/exercises_dch/#gravity","title":"Gravity","text":""},{"location":"Exercises_for_Students/exercises_dch/#problem-1_1","title":"Problem 1","text":"<p>Orbital Period and Orbital Radius</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_2","title":"Motivation:","text":"<p>The relationship between the square of the orbital period and the cube of the orbital radius, known as Kepler's Third Law, is a cornerstone of celestial mechanics. This simple yet profound relationship allows for the determination of planetary motions and has implications for understanding gravitational interactions on both local and cosmic scales. By analyzing this relationship, students can connect fundamental principles of gravity with real-world phenomena such as satellite orbits and planetary systems.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task_2","title":"Task:","text":"<ol> <li>Derive the relationship between the square of the orbital period and the cube of the orbital radius for circular orbits.</li> <li>Discuss the implications of this relationship for astronomy, including its role in calculating planetary masses and distances.</li> <li>Analyze real-world examples, such as the Moon's orbit around Earth or the orbits of planets in the Solar System.</li> <li>Optional: Implement a computational model to simulate circular orbits and verify the relationship.</li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#problem-2_1","title":"Problem 2","text":"<p>Escape Velocities and Cosmic Velocities</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_3","title":"Motivation:","text":"<p>The concept of escape velocity is crucial for understanding the conditions required to leave a celestial body's gravitational influence. Extending this concept, the first, second, and third cosmic velocities define the thresholds for orbiting, escaping, and leaving a star system. These principles underpin modern space exploration, from launching satellites to interplanetary missions.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task_3","title":"Task:","text":"<ol> <li>Define the first, second, and third cosmic velocities, explaining their physical meaning.</li> <li>Analyze the mathematical derivations and parameters affecting these velocities.</li> <li>Discuss their importance in space exploration, including launching satellites, missions to other planets, and potential interstellar travel.</li> <li>Optional: Create a simulation to calculate and visualize these velocities for different celestial bodies (e.g., Earth, Moon, Mars).</li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#problem-3","title":"Problem 3","text":"<p>Trajectories of a Freely Released Payload Near Earth</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_4","title":"Motivation:","text":"<p>When an object is released from a moving rocket near Earth, its trajectory depends on initial conditions and gravitational forces. This scenario presents a rich problem, blending principles of orbital mechanics and numerical methods. Understanding the potential trajectories is vital for space missions, such as deploying payloads or returning objects to Earth.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task_4","title":"Task:","text":"<ol> <li>Analyze the possible trajectories (e.g., parabolic, hyperbolic, elliptical) of a payload released near Earth.</li> <li>Perform a numerical analysis to compute the path of the payload based on given initial conditions (position, velocity, and altitude).</li> <li>Discuss how these trajectories relate to orbital insertion, reentry, or escape scenarios.</li> <li>Optional: Develop a computational tool to simulate and visualize the motion of the payload under Earth's gravity, accounting for initial velocities and directions.</li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#hints-and-resources_2","title":"Hints and Resources:","text":"<ul> <li>Use fundamental gravitational principles, such as Newton's Law of Gravitation and Kepler's Laws, to derive equations and analyze scenarios.</li> <li>Leverage numerical methods or software tools (e.g., Python, MATLAB) to simulate orbits and trajectories.</li> <li>Explore real-world applications, such as space mission planning, satellite deployment, and planetary exploration.</li> </ul> <p>These tasks provide a foundation for understanding gravity's influence on motion and its role in celestial mechanics and space exploration.</p>"},{"location":"Exercises_for_Students/exercises_dch/#waves","title":"Waves","text":""},{"location":"Exercises_for_Students/exercises_dch/#problem-1_2","title":"Problem 1","text":"<p>Interference Patterns on a Water Surface</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_5","title":"Motivation:","text":"<p>Interference occurs when waves from different sources overlap, creating new patterns. On a water surface, this can be easily observed when ripples from different points meet, forming distinctive interference patterns. These patterns can show us how waves combine in different ways, either reinforcing each other or canceling out.</p> <p>Studying these patterns helps us understand wave behavior in a simple, visual way. It also allows us to explore important concepts, like the relationship between wave phase and the effects of multiple sources. This task offers a hands-on approach to learning about wave interactions and their real-world applications, making it an interesting and engaging way to dive into wave physics.</p>"},{"location":"Exercises_for_Students/exercises_dch/#equation-of-a-single-disturbance","title":"Equation of a Single Disturbance:","text":"<p>A circular wave on the water surface, emanating from a point source located at \\((x_0, y_0)\\), can be described by the equation:</p> \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cdot \\cos\\left(kr - \\omega t + \\phi\\right) \\] <p>where:</p> <ul> <li>\\(\\eta(x, y, t)\\) is the displacement of the water surface at point \\((x, y)\\) and time \\(t\\),</li> <li>\\(A\\) is the amplitude of the wave,</li> <li>\\(k = \\frac{2\\pi}{\\lambda}\\) is the wave number, related to the wavelength \\(\\lambda\\),</li> <li>\\(\\omega = 2\\pi f\\) is the angular frequency, related to the frequency \\(f\\),</li> <li>\\(r = \\sqrt{(x - x_0)^2 + (y - y_0)^2}\\) is the distance from the source to the point \\((x, y)\\),</li> <li>\\(\\phi\\) is the initial phase.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#problem-statement","title":"Problem Statement:","text":"<p>Your task is to analyze the interference patterns formed on the water surface due to the superposition of waves emitted from point sources placed at the vertices of a chosen regular polygon.</p>"},{"location":"Exercises_for_Students/exercises_dch/#steps-to-follow","title":"Steps to Follow:","text":"<ol> <li> <p>Select a Regular Polygon: Choose a regular polygon (e.g., equilateral triangle, square, regular pentagon).</p> </li> <li> <p>Position the Sources: Place point wave sources at the vertices of the selected polygon.</p> </li> <li> <p>Wave Equations: Write the equations describing the waves emitted from each source, considering their respective positions.</p> </li> <li> <p>Superposition of Waves: Apply the principle of superposition by summing the wave displacements at each point on the water surface:</p> </li> </ol> <p>$$    \\eta_{\\text{sum}}(x, y, t) = \\sum_{i=1}^{N} \\eta_i(x, y, t)    $$</p> <p>where \\(N\\) is the number of sources (vertices of the polygon).</p> <ol> <li> <p>Analyze Interference Patterns: Examine the resulting displacement \\(\\eta_{\\text{sum}}(x, y, t)\\) as a function of position \\((x, y)\\) and time \\(t\\). Identify regions of constructive interference (wave amplification) and destructive interference (wave cancellation).</p> </li> <li> <p>Visualization: Present your findings graphically, illustrating the interference patterns for the chosen regular polygon.</p> </li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#considerations","title":"Considerations:","text":"<ul> <li>Assume all sources emit waves with the same amplitude \\(A\\), wavelength \\(\\lambda\\), and frequency \\(f\\).</li> <li>The waves are coherent, maintaining a constant phase difference.</li> <li>You may use simulation and visualization tools such as MATLAB, Python (with libraries like Matplotlib), or other graphical software to aid in your analysis.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#objective","title":"Objective:","text":"<p>The goal is to understand how the geometric arrangement of wave sources influences the resulting interference patterns on the water surface.</p>"},{"location":"Exercises_for_Students/exercises_dch/#circuits","title":"Circuits","text":""},{"location":"Exercises_for_Students/exercises_dch/#problem-1_3","title":"Problem 1","text":"<p>Equivalent Resistance Using Graph Theory</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_6","title":"Motivation:","text":"<p>Calculating equivalent resistance is a fundamental problem in electrical circuits, essential for understanding and designing efficient systems. While traditional methods involve iteratively applying series and parallel resistor rules, these approaches can become cumbersome for complex circuits with many components. Graph theory offers a powerful alternative, providing a structured and algorithmic way to analyze circuits.</p> <p>By representing a circuit as a graph\u2014where nodes correspond to junctions and edges represent resistors with weights equal to their resistance values\u2014we can systematically simplify even the most intricate networks. This method not only streamlines calculations but also opens the door to automated analysis, making it particularly useful in modern applications like circuit simulation software, optimization problems, and network design.</p> <p>Studying equivalent resistance through graph theory is valuable not only for its practical applications but also for the deeper insights it provides into the interplay between electrical and mathematical concepts. This approach highlights the versatility of graph theory, demonstrating its relevance across physics, engineering, and computer science.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task-options","title":"Task Options:","text":""},{"location":"Exercises_for_Students/exercises_dch/#option-1-simplified-task-algorithm-description","title":"Option 1: Simplified Task \u2013 Algorithm Description","text":"<ol> <li> <p>Describe the algorithm for calculating the equivalent resistance using graph theory.</p> </li> <li> <p>Provide the pseudocode that:</p> <ul> <li>Identifies series and parallel connections.</li> <li>Iteratively reduces the graph until a single equivalent resistance is obtained.</li> </ul> </li> <li> <p>Include a clear explanation of how the algorithm handles nested combinations.</p> </li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#option-2-advanced-task-full-implementation","title":"Option 2: Advanced Task \u2013 Full Implementation","text":"<ol> <li> <p>Implement the algorithm in a programming language of your choice.</p> </li> <li> <p>Ensure the implementation:</p> <ul> <li>Accepts a circuit graph as input.</li> <li>Handles arbitrary resistor configurations, including nested series and parallel connections.</li> <li>Outputs the final equivalent resistance.</li> </ul> </li> <li> <p>Test your implementation with examples, such as:</p> <ul> <li>Simple series and parallel combinations.</li> <li>Nested configurations.</li> <li>Complex graphs with multiple cycles.</li> </ul> </li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#deliverables_2","title":"Deliverables:","text":""},{"location":"Exercises_for_Students/exercises_dch/#option-1","title":"Option 1:","text":"<ul> <li>A detailed pseudocode and explanation of the algorithm.</li> <li>Description of how it handles complex circuit configurations.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#option-2","title":"Option 2:","text":"<ul> <li>Source code for the algorithm.</li> <li>Examples of input circuits and results.</li> <li>A brief analysis of the algorithm's efficiency and potential improvements.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#hints-and-resources_3","title":"Hints and Resources:","text":"<ul> <li>Focus on iterative graph simplification:<ul> <li>Detect linear chains for series reduction.</li> <li>Identify cycles for parallel reduction.</li> </ul> </li> <li>Use tools like <code>networkx</code> (Python) or similar for graph manipulation if you choose implementation.</li> <li>Depth-first search (DFS) or other traversal methods can help identify patterns in the graph.</li> </ul> <p>Choose the task that matches your skill level while providing a clear and structured solution to the problem.</p>"},{"location":"Exercises_for_Students/exercises_dch/#electromangetism","title":"Electromangetism","text":""},{"location":"Exercises_for_Students/exercises_dch/#problem-1_4","title":"Problem 1","text":"<p>Simulating the Effects of the Lorentz Force</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_7","title":"Motivation:","text":"<p>The Lorentz force, expressed as \\(\\mathbf{F} = q\\mathbf{E} + q\\mathbf{v} \\times \\mathbf{B}\\), governs the motion of charged particles in electric and magnetic fields. It is foundational in fields like plasma physics, particle accelerators, and astrophysics. By focusing on simulations, we can explore the practical applications and visualize the complex trajectories that arise due to this force.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task_5","title":"Task:","text":"<p>1 Exploration of Applications:</p> <ul> <li>Identify systems where the Lorentz force plays a key role (e.g., particle accelerators, mass spectrometers, plasma confinement).</li> <li>Discuss the relevance of electric (\\(\\mathbf{E}\\)) and magnetic (\\(\\mathbf{B}\\)) fields in controlling the motion of charged particles.</li> </ul> <p>2 Simulating Particle Motion:</p> <ul> <li>Implement a simulation to compute and visualize the trajectory of a charged particle under:<ul> <li>A uniform magnetic field.</li> <li>Combined uniform electric and magnetic fields.</li> <li>Crossed electric and magnetic fields.</li> </ul> </li> <li>Simulate the particle\u2019s circular, helical, or drift motion based on initial conditions and field configurations.</li> </ul> <p>3 Parameter Exploration:</p> <ul> <li>Allow variations in:<ul> <li>Field strengths (\\(E\\), \\(B\\)).</li> <li>Initial particle velocity (\\(\\mathbf{v}\\)).</li> <li>Charge and mass of the particle (\\(q\\), \\(m\\)).</li> </ul> </li> <li>Observe how these parameters influence the trajectory.</li> </ul> <p>4 Visualization:</p> <ul> <li>Create clear, labeled plots showing the particle\u2019s path in 2D and 3D for different scenarios.</li> <li>Highlight physical phenomena such as the Larmor radius and drift velocity.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#deliverables_3","title":"Deliverables:","text":"<ol> <li>A Markdown document with Python script or notebook implementing the simulations.</li> <li>Visualizations of particle trajectories for the specified field configurations.</li> <li>A discussion on how the results relate to practical systems, such as cyclotrons or magnetic traps.</li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#hints-and-resources_4","title":"Hints and Resources:","text":"<ul> <li>Use numerical methods like the Euler or Runge-Kutta method to solve the equations of motion</li> <li>Employ Python libraries such as NumPy for calculations and Matplotlib for visualizations.</li> <li>Start with simple cases (e.g., uniform magnetic field) and gradually add complexity (e.g., crossed fields).</li> </ul> <p>This task focuses on applying the Lorentz force concept through simulations, enabling an intuitive understanding of its effects in real-world scenarios.</p>"},{"location":"Exercises_for_Students/exercises_dch/#statistics","title":"Statistics","text":""},{"location":"Exercises_for_Students/exercises_dch/#problem-1_5","title":"Problem 1","text":"<p>Exploring the Central Limit Theorem Through Simulations</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_8","title":"Motivation:","text":"<p>The Central Limit Theorem (CLT) is a cornerstone of probability and statistics, stating that the sampling distribution of the sample mean approaches a normal distribution as the sample size increases, regardless of the population\u2019s original distribution. Simulations provide an intuitive and hands-on way to observe this phenomenon in action.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task_6","title":"Task:","text":"<p>1 Simulating Sampling Distributions:</p> <ul> <li>Select several types of population distributions, such as:<ul> <li>Uniform distribution.</li> <li>Exponential distribution.</li> <li>Binomial distribution.</li> </ul> </li> <li>For each distribution, generate a large dataset representing the population.</li> </ul> <p>2 Sampling and Visualization:</p> <ul> <li>Randomly sample data from the population and calculate the sample mean for different sample sizes (e.g., 5, 10, 30, 50).</li> <li>Repeat the process multiple times to create a sampling distribution of the sample mean.</li> <li>Plot histograms of the sample means for each sample size and observe the convergence to a normal distribution.</li> </ul> <p>3 Parameter Exploration:</p> <ul> <li>Investigate how the shape of the original distribution and the sample size influence the rate of convergence to normality.</li> <li>Highlight the impact of the population\u2019s variance on the spread of the sampling distribution.</li> </ul> <p>4 Practical Applications:</p> <ul> <li>Reflect on the importance of the CLT in real-world scenarios, such as:<ul> <li>Estimating population parameters.</li> <li>Quality control in manufacturing.</li> <li>Predicting outcomes in financial models.</li> </ul> </li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#deliverables_4","title":"Deliverables:","text":"<ol> <li>A Markdown document and Python scripts or notebooks implementing the simulations for various population distributions.</li> <li>Plots illustrating the sampling distributions and their progression toward normality.</li> <li>A discussion on the implications of the results and their connection to theoretical expectations.</li> </ol>"},{"location":"Exercises_for_Students/exercises_dch/#hints-and-resources_5","title":"Hints and Resources:","text":"<ul> <li>Use Python libraries such as NumPy for random number generation and Matplotlib/Seaborn for visualization.</li> <li>Begin with simple populations (e.g., uniform or normal) before exploring more complex distributions.</li> <li>Ensure students understand how to calculate and interpret the sample mean and variance.</li> </ul> <p>This task encourages students to explore the Central Limit Theorem through computational experiments, deepening their understanding of its significance in statistics.</p>"},{"location":"Exercises_for_Students/exercises_dch/#problem-2_2","title":"Problem 2","text":"<p>Estimating Pi Using Monte Carlo Methods</p>"},{"location":"Exercises_for_Students/exercises_dch/#motivation_9","title":"Motivation:","text":"<p>Monte Carlo simulations are a powerful class of computational techniques that use randomness to solve problems or estimate values. One of the most elegant applications of Monte Carlo methods is estimating the value of \\(\\pi\\) through geometric probability. By randomly generating points and analyzing their positions relative to a geometric shape, we can approximate \\(\\pi\\) in an intuitive and visually engaging way.</p> <p>This problem connects fundamental concepts of probability, geometry, and numerical computation. It also provides a gateway to understanding how randomness can be harnessed to solve complex problems in physics, finance, and computer science. The Monte Carlo approach to \\(\\pi\\) estimation highlights the versatility and simplicity of this method while offering practical insights into convergence rates and computational efficiency.</p>"},{"location":"Exercises_for_Students/exercises_dch/#task_7","title":"Task","text":""},{"location":"Exercises_for_Students/exercises_dch/#part-1-estimating-pi-using-a-circle","title":"Part 1: Estimating \\(\\pi\\) Using a Circle","text":"<p>1 Theoretical Foundation:</p> <ul> <li>Explain how the ratio of points inside a circle to the total number of points in a square can be used to estimate \\(\\pi\\).</li> <li>Derive the formula \\(\\pi \\approx 4 \\cdot (\\text{points inside the circle} / \\text{total points})\\) for a unit circle.</li> </ul> <p>2 Simulation:</p> <ul> <li>Generate random points in a 2D square bounding a unit circle.</li> <li>Count the number of points falling inside the circle.</li> <li>Estimate \\(\\pi\\) based on the ratio of points inside the circle to the total points.</li> </ul> <p>3 Visualization:</p> <ul> <li>Create a plot showing the randomly generated points, distinguishing those inside and outside the circle.</li> </ul> <p>4 Analysis:</p> <ul> <li>Investigate how the accuracy of the estimate improves as the number of points increases.</li> <li>Discuss the convergence rate and computational considerations for this method.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#part-2-estimating-pi-using-buffons-needle","title":"Part 2: Estimating \\(\\pi\\) Using Buffon\u2019s Needle","text":"<p>1 Theoretical Foundation:</p> <ul> <li>Describe Buffon\u2019s Needle problem, where \\(\\pi\\) can be estimated based on the probability of a needle crossing parallel lines on a plane.</li> <li>Derive the formula \\(\\pi \\approx (2 \\cdot \\text{needle length} \\cdot \\text{number of throws}) / (\\text{distance between lines} \\cdot \\text{number of crossings})\\).</li> </ul> <p>2 Simulation:</p> <ul> <li>Simulate the random dropping of a needle on a plane with parallel lines.</li> <li>Count the number of times the needle crosses a line.</li> <li>Estimate \\(\\pi\\) based on the derived formula.</li> </ul> <p>3 Visualization:</p> <ul> <li>Create a graphical representation of the simulation, showing the needle positions relative to the lines.</li> </ul> <p>4 Analysis:</p> <ul> <li>Explore how the number of needle drops affects the estimate\u2019s accuracy.</li> <li>Compare the convergence rate of this method to the circle-based approach.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#deliverables_5","title":"Deliverables","text":"<p>1 A Markdown document with:</p> <ul> <li>Clear explanations of the methods and formulas.</li> <li>A discussion of theoretical foundations and results.</li> </ul> <p>2 Python scripts or notebooks implementing the simulations, including:</p> <ul> <li>Code for the circle-based Monte Carlo method.</li> <li>Code for the Buffon\u2019s Needle method.</li> </ul> <p>3 Graphical outputs:</p> <ul> <li>Plots showing random points for the circle-based method.</li> <li>Visualizations of needle positions for Buffon\u2019s Needle.</li> </ul> <p>4 Analysis:</p> <ul> <li>Tables or graphs showing the convergence of estimated \\(\\pi\\) as a function of the number of iterations for both methods.</li> <li>A comparison of the methods in terms of accuracy and computational efficiency.</li> </ul>"},{"location":"Exercises_for_Students/exercises_dch/#hints-and-resources_6","title":"Hints and Resources","text":"<ul> <li>Use Python libraries such as NumPy for random number generation and Matplotlib for visualizations.</li> <li>For the circle-based method, ensure the random points are uniformly distributed within the square.</li> <li>For Buffon\u2019s Needle, pay attention to geometric constraints, such as the relationship between the needle length and the distance between lines.</li> <li>Start with a small number of iterations to validate the implementation, then increase the sample size to observe convergence.</li> </ul> <p>This task offers a practical and visually intuitive way to explore Monte Carlo simulations, emphasizing their application to problems in geometry and probability.</p>"},{"location":"Experiments_Statistics/estimation_of_pi/","title":"Monte Carlo Estimation of \\(\\pi\\)","text":""},{"location":"Experiments_Statistics/estimation_of_pi/#overview","title":"Overview","text":"<p>Monte Carlo methods provide a stochastic way to solve problems that might be deterministic in principle. Estimating the value of \\(\\pi\\) is a classic problem in this domain, often demonstrated using simulations like:</p> <ol> <li>Circle and Square Method: Simulating random points in a square and checking if they fall inside an inscribed circle.</li> <li>Buffon's Needle Problem: Dropping needles on a floor with parallel lines and calculating the probability of crossing a line.</li> </ol> <p>Both methods highlight the power of randomness in approximating mathematical constants.</p>"},{"location":"Experiments_Statistics/estimation_of_pi/#python-code-example-estimating-pi-with-monte-carlo","title":"Python Code Example: Estimating \\(\\pi\\) with Monte Carlo","text":""},{"location":"Experiments_Statistics/estimation_of_pi/#1-circle-and-square-method","title":"1. Circle and Square Method","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\ntotal_points = 10000\n\n# Generate random points in a unit square\nx = np.random.uniform(-1, 1, total_points)\ny = np.random.uniform(-1, 1, total_points)\n\n# Check if points are inside the unit circle\ninside_circle = x**2 + y**2 &lt;= 1\n\n# Estimate \u03c0\npi_estimate = 4 * np.sum(inside_circle) / total_points\n\n# Visualization\nplt.figure(figsize=(8, 8))\nplt.scatter(x[inside_circle], y[inside_circle], s=1, color='blue', label=\"Inside Circle\")\nplt.scatter(x[~inside_circle], y[~inside_circle], s=1, color='red', label=\"Outside Circle\")\ncircle = plt.Circle((0, 0), 1, color='black', fill=False)\nplt.gca().add_artist(circle)\nplt.title(f\"Monte Carlo Estimation of \u03c0: {pi_estimate:.4f}\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend()\nplt.axis(\"equal\")\nplt.grid()\nplt.savefig(\"docs/Mechanics/pic/monte_carlo_circle.png\")\nplt.show()\n</code></pre>"},{"location":"Experiments_Statistics/estimation_of_pi/#2-buffons-needle-problem","title":"2. Buffon's Needle Problem","text":"<pre><code>import numpy as np\n\n# Parameters\nneedle_length = 1\nline_spacing = 2\ntotal_needles = 10000\n\n# Simulate needle drops\ntheta = np.random.uniform(0, np.pi / 2, total_needles)  # Angle with the horizontal\nx_center = np.random.uniform(0, line_spacing / 2, total_needles)  # Distance to nearest line\n\n# Check if needle crosses a line\ncrosses_line = x_center &lt;= (needle_length / 2) * np.sin(theta)\n\n# Estimate \u03c0\npi_estimate = (2 * needle_length * total_needles) / (np.sum(crosses_line) * line_spacing)\n\n# Output\nprint(f\"Monte Carlo Estimation of \u03c0 using Buffon's Needle: {pi_estimate:.4f}\")\n</code></pre>"},{"location":"Experiments_Statistics/estimation_of_pi/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Randomness and Approximation: Monte Carlo methods rely on randomness to approximate deterministic quantities. Increasing the number of simulations improves the accuracy of the result.</p> </li> <li> <p>Circle and Square: This method illustrates the geometric relationship between a circle and its circumscribing square.</p> </li> <li> <p>Buffon's Needle: A classic probabilistic approach linking geometry and probability theory.</p> </li> </ol>"},{"location":"Experiments_Statistics/estimation_of_pi/#suggested-projects","title":"Suggested Projects","text":"<ol> <li> <p>Accuracy vs. Sample Size: Analyze how the estimation of \\(\\pi\\) improves as the number of points or needles increases.</p> </li> <li> <p>Higher Dimensions: Extend the circle and square method to estimate the volume of a hypersphere in higher dimensions.</p> </li> <li> <p>Visualization Enhancements: Animate the needle drops or point generation for better understanding.</p> </li> <li> <p>Statistical Analysis: Perform multiple runs and compute confidence intervals for the estimated \\(\\pi\\).</p> </li> </ol> <p>These examples showcase how randomness can uncover mathematical truths. Experiment with these methods and variations to appreciate the elegance of Monte Carlo techniques in estimating \\(\\pi\\).</p>"},{"location":"Mechanics/chuas_circuit/","title":"Chua's Circuit","text":""},{"location":"Mechanics/chuas_circuit/#overview","title":"Overview","text":"<p>Chua's Circuit is a simple electronic circuit that exhibits a wide range of nonlinear dynamics, including chaos. It is a physical realization of a chaotic system and has applications in studying nonlinear dynamics and chaos theory.</p> <p>The equations describing Chua's circuit are:</p> \\[ \\frac{dx}{dt} = \\alpha (y - x - h(x)) \\] \\[ \\frac{dy}{dt} = x - y + z \\] \\[ \\frac{dz}{dt} = -\\beta y \\] <p>Where:</p> <ul> <li>\\(h(x)\\) is a piecewise-linear function that models the nonlinear resistance (Chua's diode):   $$ h(x) = m_1 x + 0.5 (m_0 - m_1) (|x + 1| - |x - 1|) $$</li> <li>\\(\\alpha\\), \\(\\beta\\), \\(m_0\\), and \\(m_1\\) are parameters defining the circuit's behavior.</li> </ul>"},{"location":"Mechanics/chuas_circuit/#python-code-example-simulating-and-visualizing-chuas-circuit","title":"Python Code Example: Simulating and Visualizing Chua's Circuit","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\n# Define the piecewise-linear function h(x)\ndef chua_diode(x, m0, m1):\n    return m1 * x + 0.5 * (m0 - m1) * (np.abs(x + 1) - np.abs(x - 1))\n\n# Define the system of equations for Chua's Circuit\ndef chua_circuit(t, state, alpha, beta, m0, m1):\n    x, y, z = state\n    dx_dt = alpha * (y - x - chua_diode(x, m0, m1))\n    dy_dt = x - y + z\n    dz_dt = -beta * y\n    return [dx_dt, dy_dt, dz_dt]\n\n# Parameters\nalpha = 9.0\nbeta = 14.286\nm0 = -1.143\nm1 = -0.714\n\n# Initial conditions\ninitial_state = [0.7, 0.0, 0.0]  # Initial values for x, y, z\n\n# Time span for the simulation\ntime_span = (0, 50)\ntime_eval = np.linspace(time_span[0], time_span[1], 10000)\n\n# Solve the equations\nsolution = solve_ivp(chua_circuit, time_span, initial_state, args=(alpha, beta, m0, m1), t_eval=time_eval, method='RK45')\n\n# Extract the results\nx, y, z = solution.y\n\n# Plot the attractor in 3D\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\nax.plot(x, y, z, lw=0.5)\nax.set_title(\"Chua's Circuit Attractor\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.set_zlabel(\"z\")\nplt.savefig(\"docs/Mechanics/pic/chua_attractor.png\")\nplt.show()\n</code></pre>"},{"location":"Mechanics/chuas_circuit/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Chaos in Electronics: Chua's circuit is a tangible demonstration of chaos, allowing theoretical predictions to be experimentally verified.</p> </li> <li> <p>Piecewise Nonlinearity: The nonlinear resistor introduces the nonlinearity needed for chaotic behavior.</p> </li> <li> <p>Rich Dynamics: Depending on the parameters, the circuit exhibits periodic, quasiperiodic, or chaotic behavior.</p> </li> </ol>"},{"location":"Mechanics/chuas_circuit/#suggested-projects","title":"Suggested Projects","text":"<ol> <li> <p>Parameter Exploration: Investigate how varying \\(\\alpha\\), \\(\\beta\\), \\(m_0\\), and \\(m_1\\) affects the dynamics.</p> </li> <li> <p>Lyapunov Exponent: Compute the Lyapunov exponent to quantify chaos in the circuit.</p> </li> <li> <p>Physical Implementation: Build Chua's circuit with real electronic components and compare the experimental results with simulations.</p> </li> <li> <p>Fractal Dimension: Calculate the fractal dimension of the attractor to understand its complexity.</p> </li> </ol> <p>Chua's Circuit provides a fascinating look into chaos and nonlinear dynamics. Experiment with the parameters and initial conditions to explore its rich behavior!</p>"},{"location":"Mechanics/double_pendulum_trajectories/","title":"Double Pendulum and Sensitivity to Initial Conditions","text":""},{"location":"Mechanics/double_pendulum_trajectories/#overview","title":"Overview","text":"<p>The double pendulum is a classic example of a chaotic system. Its motion is highly sensitive to initial conditions, making it an excellent demonstration of chaos in dynamic systems.</p> <p>The equations of motion for the double pendulum are derived from the Lagrangian and are solved numerically for this analysis.</p>"},{"location":"Mechanics/double_pendulum_trajectories/#python-code-example-simulating-and-plotting-trajectories","title":"Python Code Example: Simulating and Plotting Trajectories","text":"<p>Here is a Python code snippet to simulate and visualize the trajectories of a double pendulum for two slightly different initial conditions:</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\n# Constants for the double pendulum\nL1, L2 = 1.0, 1.0  # lengths of the pendulum arms\nM1, M2 = 1.0, 1.0  # masses of the pendulums\ng = 9.81  # acceleration due to gravity\n\ndef double_pendulum_ode(t, y):\n    \"\"\"Defines the equations of motion for the double pendulum.\"\"\"\n    theta1, z1, theta2, z2 = y  # Unpack the state vector\n\n    delta = theta2 - theta1\n    den1 = (M1 + M2) * L1 - M2 * L1 * np.cos(delta) ** 2\n    den2 = (L2 / L1) * den1\n\n    dydt = np.zeros_like(y)\n    dydt[0] = z1\n    dydt[1] = (\n        M2 * L1 * z1 ** 2 * np.sin(delta) * np.cos(delta)\n        + M2 * g * np.sin(theta2) * np.cos(delta)\n        + M2 * L2 * z2 ** 2 * np.sin(delta)\n        - (M1 + M2) * g * np.sin(theta1)\n    ) / den1\n    dydt[2] = z2\n    dydt[3] = (\n        -M2 * L2 * z2 ** 2 * np.sin(delta) * np.cos(delta)\n        + (M1 + M2) * g * np.sin(theta1) * np.cos(delta)\n        - (M1 + M2) * L1 * z1 ** 2 * np.sin(delta)\n        - (M1 + M2) * g * np.sin(theta2)\n    ) / den2\n    return dydt\n\n# Initial conditions: two similar starting states\ny0_1 = [np.pi / 4, 0, np.pi / 2, 0]  # [theta1, theta1_dot, theta2, theta2_dot]\ny0_2 = [np.pi / 4 + 0.01, 0, np.pi / 2, 0]  # Slightly perturbed\n\n# Time span for the simulation\nt_span = (0, 20)\nt_eval = np.linspace(t_span[0], t_span[1], 2000)\n\n# Solve the equations of motion\nsol1 = solve_ivp(double_pendulum_ode, t_span, y0_1, t_eval=t_eval, method='RK45')\nsol2 = solve_ivp(double_pendulum_ode, t_span, y0_2, t_eval=t_eval, method='RK45')\n\n# Plot the trajectories of theta1 and theta2\nplt.figure(figsize=(12, 6))\nplt.plot(t_eval, sol1.y[0], label=\"Theta1 (Initial 1)\")\nplt.plot(t_eval, sol1.y[2], label=\"Theta2 (Initial 1)\")\nplt.plot(t_eval, sol2.y[0], label=\"Theta1 (Initial 2)\", linestyle=\"--\")\nplt.plot(t_eval, sol2.y[2], label=\"Theta2 (Initial 2)\", linestyle=\"--\")\nplt.title(\"Trajectories of the Double Pendulum\")\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Angle (rad)\")\nplt.legend()\nplt.grid()\nplt.show()\n\n# Plot the difference in trajectories\nplt.figure(figsize=(12, 6))\nplt.plot(t_eval, np.abs(sol1.y[0] - sol2.y[0]), label=\"|Theta1 Difference|\")\nplt.plot(t_eval, np.abs(sol1.y[2] - sol2.y[2]), label=\"|Theta2 Difference|\")\nplt.title(\"Difference Between Trajectories\")\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Angle Difference (rad)\")\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre> <p> </p>"},{"location":"Mechanics/double_pendulum_trajectories/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Trajectories Diverge Rapidly: Even with a small initial difference, the trajectories of the double pendulum diverge quickly, illustrating chaotic behavior.</p> </li> <li> <p>Visualization of Sensitivity: The second plot clearly shows how the differences grow over time, emphasizing the system's sensitivity to initial conditions.</p> </li> </ol>"},{"location":"Mechanics/double_pendulum_trajectories/#suggested-projects","title":"Suggested Projects","text":"<ol> <li>Energy Analysis: Calculate and plot the total energy of the system to verify conservation laws.</li> <li>3D Visualization: Extend the analysis to visualize the pendulum's motion in 3D space.</li> <li>Real-World Experiment: Compare the simulation to a physical double pendulum setup.</li> <li>Parameter Variation: Investigate how varying lengths and masses affect the system's dynamics.</li> </ol> <p>This example demonstrates the chaotic nature of the double pendulum and its sensitivity to initial conditions. Try modifying the initial states or parameters to observe how the system behaves!</p>"},{"location":"Mechanics/duffing_oscillator/","title":"Duffing Oscillator","text":""},{"location":"Mechanics/duffing_oscillator/#overview","title":"Overview","text":"<p>The Duffing oscillator is a nonlinear second-order differential equation used to model systems with a restoring force that is not purely linear. It has applications in physics, engineering, and even biology.</p> <p>The equation is:</p> \\[ \\ddot{x} + \\delta \\dot{x} + \\alpha x + \\beta x^3 = \\gamma \\cos(\\omega t) \\] <p>Where: - \\(x\\) is the displacement. - \\(\\delta\\) is the damping coefficient. - \\(\\alpha\\) is the linear stiffness. - \\(\\beta\\) is the nonlinear stiffness. - \\(\\gamma\\) is the amplitude of the driving force. - \\(\\omega\\) is the angular frequency of the driving force.</p>"},{"location":"Mechanics/duffing_oscillator/#python-code-example-simulating-and-visualizing-the-duffing-oscillator","title":"Python Code Example: Simulating and Visualizing the Duffing Oscillator","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\n# Define the Duffing oscillator\ndef duffing(t, state, delta, alpha, beta, gamma, omega):\n    x, dx_dt = state\n    ddx_dt = -delta * dx_dt - alpha * x - beta * x**3 + gamma * np.cos(omega * t)\n    return [dx_dt, ddx_dt]\n\n# Parameters\ndelta = 0.2  # Damping coefficient\nalpha = -1.0  # Linear stiffness\nbeta = 1.0  # Nonlinear stiffness\ngamma = 0.3  # Driving force amplitude\nomega = 1.2  # Driving force frequency\n\n# Initial conditions\ninitial_state = [0.1, 0.0]  # Initial displacement and velocity\n\n# Time span for the simulation\ntime_span = (0, 100)\ntime_eval = np.linspace(time_span[0], time_span[1], 10000)\n\n# Solve the Duffing oscillator\nsolution = solve_ivp(duffing, time_span, initial_state, args=(delta, alpha, beta, gamma, omega), t_eval=time_eval, method='RK45')\n\n# Extract the results\nx, dx_dt = solution.y\n\n# Plot the displacement over time\nplt.figure(figsize=(12, 6))\nplt.plot(solution.t, x, label=\"Displacement\", color=\"blue\")\nplt.title(\"Duffing Oscillator: Displacement Over Time\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Displacement\")\nplt.grid()\nplt.legend()\nplt.savefig(\"docs/Mechanics/pic/duffing_time.png\")\nplt.show()\n\n# Plot the phase plane\nplt.figure(figsize=(8, 8))\nplt.plot(x, dx_dt, color=\"purple\")\nplt.title(\"Phase Plane of the Duffing Oscillator\")\nplt.xlabel(\"Displacement\")\nplt.ylabel(\"Velocity\")\nplt.grid()\nplt.savefig(\"docs/Mechanics/pic/duffing_phase.png\")\nplt.show()\n</code></pre>"},{"location":"Mechanics/duffing_oscillator/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Nonlinear Dynamics: The cubic term introduces nonlinearity, leading to rich dynamics, including bifurcations and chaos.</p> </li> <li> <p>Phase Space Behavior: The phase plane can reveal limit cycles, chaotic attractors, or other patterns depending on parameters.</p> </li> <li> <p>Driven and Damped System: The interplay of damping, driving force, and nonlinearity determines the behavior of the oscillator.</p> </li> </ol>"},{"location":"Mechanics/duffing_oscillator/#suggested-projects","title":"Suggested Projects","text":"<ol> <li> <p>Bifurcation Analysis: Vary parameters like \\(\\gamma\\) or \\(\\omega\\) to explore transitions between different dynamical regimes.</p> </li> <li> <p>Lyapunov Exponent: Compute the Lyapunov exponent to identify chaotic regions.</p> </li> <li> <p>Comparison with Real Systems: Model physical systems like beam vibrations or electronic circuits.</p> </li> <li> <p>Energy Analysis: Study how energy evolves in the system over time, especially in chaotic regimes.</p> </li> </ol> <p>This example demonstrates the nonlinear dynamics of the Duffing oscillator. Experiment with parameters and initial conditions to uncover its fascinating behavior!</p>"},{"location":"Mechanics/henon_map/","title":"H\u00e9non Map","text":""},{"location":"Mechanics/henon_map/#overview","title":"Overview","text":"<p>The H\u00e9non map is a discrete-time dynamical system that serves as a simple model of chaotic systems. It is defined by a two-dimensional recursive relation:</p> \\[ \\begin{align*} x_{n+1} &amp;= 1 - a x_n^2 + y_n \\\\ y_{n+1} &amp;= b x_n \\end{align*} \\] <p>Where: - \\(a\\) and \\(b\\) are parameters that control the behavior of the system. - \\((x_n, y_n)\\) represents the state of the system at iteration \\(n\\).</p> <p>For the classic values \\(a = 1.4\\) and \\(b = 0.3\\), the map exhibits chaotic behavior and forms a strange attractor.</p>"},{"location":"Mechanics/henon_map/#python-code-example-simulating-and-visualizing-the-henon-map","title":"Python Code Example: Simulating and Visualizing the H\u00e9non Map","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the H\u00e9non map\ndef henon_map(x, y, a, b):\n    x_next = 1 - a * x**2 + y\n    y_next = b * x\n    return x_next, y_next\n\n# Parameters\na = 1.4\nb = 0.3\n\n# Initial conditions\nx, y = 0.0, 0.0\n\n# Number of iterations\niterations = 10000\n\n# Store the results\nx_values = []\ny_values = []\n\n# Iterate the map\nfor _ in range(iterations):\n    x, y = henon_map(x, y, a, b)\n    x_values.append(x)\n    y_values.append(y)\n\n# Plot the H\u00e9non attractor\nplt.figure(figsize=(8, 8))\nplt.scatter(x_values, y_values, s=0.1, color=\"purple\")\nplt.title(\"H\u00e9non Map Attractor\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.grid()\nplt.savefig(\"docs/Mechanics/pic/henon_map.png\")\nplt.show()\n</code></pre>"},{"location":"Mechanics/henon_map/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Chaotic Behavior: The H\u00e9non map is one of the simplest systems to exhibit chaos, making it a foundational model in dynamical systems.</p> </li> <li> <p>Strange Attractor: The attractor forms a fractal structure, highlighting the self-similar nature of chaotic systems.</p> </li> <li> <p>Parameter Sensitivity: Small changes in \\(a\\) or \\(b\\) can lead to significant differences in the attractor's shape and dynamics.</p> </li> </ol>"},{"location":"Mechanics/henon_map/#suggested-projects","title":"Suggested Projects","text":"<ol> <li> <p>Parameter Exploration: Investigate how varying \\(a\\) and \\(b\\) affects the attractor's shape and stability.</p> </li> <li> <p>Fractal Dimension: Calculate the fractal dimension of the H\u00e9non attractor to quantify its complexity.</p> </li> <li> <p>Lyapunov Exponent: Compute the Lyapunov exponent to characterize the map's chaotic nature.</p> </li> <li> <p>3D Visualization: Extend the analysis to include a time dimension or color code the points by iteration.</p> </li> </ol> <p>This example introduces the chaotic dynamics of the H\u00e9non map. Experiment with different initial conditions and parameters to uncover the fascinating behavior of this simple yet rich system!</p>"},{"location":"Mechanics/logistic_equation_bifurcation/","title":"Logistic Equation and Bifurcation","text":""},{"location":"Mechanics/logistic_equation_bifurcation/#overview","title":"Overview","text":"<p>The logistic equation is a simple mathematical model that describes population growth with a carrying capacity. The equation is:</p> \\[ x_{n+1} = r x_n (1 - x_n) \\] <p>Where:</p> <ul> <li>\\(x_n\\) is the population at generation \\(n\\) (normalized between 0 and 1).</li> <li>\\(r\\) is the growth rate parameter.</li> </ul> <p>This model exhibits interesting dynamics as the parameter \\(r\\) varies, leading to bifurcations and chaotic behavior.</p>"},{"location":"Mechanics/logistic_equation_bifurcation/#python-code-example-simulating-and-plotting-bifurcations","title":"Python Code Example: Simulating and Plotting Bifurcations","text":"<p>Here is a Python code snippet to simulate and visualize the bifurcation diagram of the logistic equation:</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the logistic map function, which calculates the next population value\n# given the current population (x) and the growth rate (r).\ndef logistic_map(r, x):\n    return r * x * (1 - x)  # Core equation of the logistic map\n\n# Function to generate and plot the bifurcation diagram\ndef bifurcation_diagram(r_min=2.5, r_max=4.0, steps=10000, discard=1000, plot_points=200):\n    # Generate a range of r values between r_min and r_max.\n    r_values = np.linspace(r_min, r_max, steps)\n\n    # Initialize the population values with an array of 0.5 (arbitrary starting value).\n    x = 0.5 * np.ones(steps)\n\n    # Set up the figure for plotting.\n    plt.figure(figsize=(10, 7))\n\n    # Iterate to discard transient dynamics, ensuring we only analyze steady-state behavior.\n    for _ in range(discard):\n        x = logistic_map(r_values, x)\n\n    # After discarding transients, iterate again to collect data points for the diagram.\n    for _ in range(plot_points):\n        x = logistic_map(r_values, x)\n        # Plot the r values against the current population values (x).\n        plt.plot(r_values, x, ',k', alpha=0.25)  # ',' creates small dots for a dense diagram\n\n    # Add plot titles and labels for clarity.\n    plt.title(\"Bifurcation Diagram of the Logistic Map\")\n    plt.xlabel(\"Growth Rate (r)\")\n    plt.ylabel(\"Population (x)\")\n    plt.grid(True, alpha=0.5)  # Optional grid for better readability\n    plt.show()\n\n# Entry point to execute the bifurcation diagram plot.\nif __name__ == \"__main__\":\n    bifurcation_diagram()  # Call the function with default parameters\n</code></pre> <p></p>"},{"location":"Mechanics/logistic_equation_bifurcation/#key-insights","title":"Key Insights","text":"<ol> <li>Stable Fixed Points: For small \\(r\\), the population converges to a single fixed point.</li> <li>Periodic Orbits: As \\(r\\) increases, bifurcations occur, leading to periodic cycles.</li> <li>Chaos: For \\(r \\geq 3.57\\), chaotic behavior is observed, where the population no longer settles into predictable cycles.</li> </ol>"},{"location":"Mechanics/logistic_equation_bifurcation/#applications","title":"Applications","text":"<ul> <li>Ecology: Modeling species populations.</li> <li>Economics: Describing market dynamics.</li> <li>Physics: Exploring chaotic systems.</li> </ul>"},{"location":"Mechanics/logistic_equation_bifurcation/#advanced-exploration","title":"Advanced Exploration","text":""},{"location":"Mechanics/logistic_equation_bifurcation/#suggested-student-projects","title":"Suggested Student Projects","text":"<p>Students can extend this analysis in the following ways:</p> <ol> <li> <p>Exploration of Lyapunov Exponent: Implement a calculation of the Lyapunov exponent to quantify chaos in the logistic map. This involves computing the average divergence of nearby trajectories.</p> </li> <li> <p>Effect of Initial Conditions: Investigate how varying the initial population \\(x_0\\) affects the bifurcation diagram. Plot diagrams for different \\(x_0\\) values and compare.</p> </li> <li> <p>Parameter Sensitivity: Analyze the sensitivity of the system to small changes in the growth rate \\(r\\) within the chaotic region. Visualize how small perturbations in \\(r\\) can lead to different outcomes.</p> </li> <li> <p>3D Visualization: Extend the bifurcation diagram to include a time dimension, creating a 3D plot to visualize the dynamics.</p> </li> <li> <p>Applications in Real-World Data: Apply the logistic map to real-world data, such as population studies or stock market fluctuations, to see how well it models observed behaviors.</p> </li> <li> <p>Programming Challenge: Implement the bifurcation diagram using a different programming language or visualization library (e.g., JavaScript with D3.js or MATLAB).</p> </li> </ol> <p>This is an introductory example to explore the fascinating behavior of dynamic systems through the logistic equation. Try tweaking the parameters in the code to see how the system's behavior changes!</p>"},{"location":"Mechanics/lorenz_system_and_attractor/","title":"Lorenz System and Attractor","text":""},{"location":"Mechanics/lorenz_system_and_attractor/#overview","title":"Overview","text":"<p>The Lorenz system is a set of three coupled, first-order differential equations that exhibit chaotic behavior for certain parameter values. It was originally derived by Edward Lorenz as a simplified model for atmospheric convection.</p> <p>The equations are:</p> \\[ \\frac{dx}{dt} = \\sigma(y - x) \\] \\[ \\frac{dy}{dt} = x(\\rho - z) - y \\] \\[ \\frac{dz}{dt} = xy - \\beta z \\] <p>Where:</p> <ul> <li>\\(\\sigma\\) is the Prandtl number.</li> <li>\\(\\rho\\) is the Rayleigh number.</li> <li>\\(\\beta\\) is a geometric factor.</li> </ul> <p>For \\(\\sigma = 10\\), \\(\\rho = 28\\), and \\(\\beta = 8/3\\), the system exhibits chaotic behavior.</p>"},{"location":"Mechanics/lorenz_system_and_attractor/#python-code-example-simulating-and-visualizing-the-lorenz-attractor","title":"Python Code Example: Simulating and Visualizing the Lorenz Attractor","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\n# Define the Lorenz system\ndef lorenz(t, state, sigma, rho, beta):\n    x, y, z = state\n    dx_dt = sigma * (y - x)\n    dy_dt = x * (rho - z) - y\n    dz_dt = x * y - beta * z\n    return [dx_dt, dy_dt, dz_dt]\n\n# Parameters\nsigma = 10.0\nrho = 28.0\nbeta = 8 / 3\n\n# Initial conditions\ninitial_state = [1.0, 1.0, 1.0]\n\n# Time span for the simulation\ntime_span = (0, 50)\ntime_eval = np.linspace(time_span[0], time_span[1], 10000)\n\n# Solve the Lorenz system\nsolution = solve_ivp(lorenz, time_span, initial_state, args=(sigma, rho, beta), t_eval=time_eval, method='RK45')\n\n# Extract the results\nx, y, z = solution.y\n\n# Plot the Lorenz attractor\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\nax.plot(x, y, z, lw=0.5)\nax.set_title(\"Lorenz Attractor\")\nax.set_xlabel(\"X\")\nax.set_ylabel(\"Y\")\nax.set_zlabel(\"Z\")\nplt.savefig(\"docs/Mechanics/pic/lorenz_attractor.png\")\nplt.show()\n</code></pre>"},{"location":"Mechanics/lorenz_system_and_attractor/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Sensitivity to Initial Conditions:    Small differences in initial conditions lead to vastly different trajectories over time, a hallmark of chaos.</p> </li> <li> <p>Attractor Shape:    The trajectories form a butterfly-shaped attractor in 3D space.</p> </li> </ol>"},{"location":"Mechanics/lorenz_system_and_attractor/#suggested-projects","title":"Suggested Projects","text":"<ol> <li> <p>Parameter Exploration: Study how changing \\(\\sigma\\), \\(\\rho\\), and \\(\\beta\\) affects the system\u2019s behavior.</p> </li> <li> <p>Lyapunov Exponent: Quantify the chaos by calculating the Lyapunov exponent of the system.</p> </li> <li> <p>Comparison with Real Systems: Compare the Lorenz system to experimental data from fluid dynamics or weather patterns.</p> </li> <li> <p>3D Visualization: Use interactive tools like Plotly to explore the attractor dynamically.</p> </li> </ol> <p>This example demonstrates the chaotic nature of the Lorenz system. Experiment with the parameters or initial conditions to further explore its dynamics!</p>"},{"location":"Mechanics/pendulum_with_damping_and_forcing/","title":"Pendulum with Damping and Forcing","text":""},{"location":"Mechanics/pendulum_with_damping_and_forcing/#overview","title":"Overview","text":"<p>The forced damped pendulum is a classic example of a nonlinear dynamic system that exhibits a wide range of behaviors, including periodic motion, quasiperiodicity, and chaos. It is governed by the following equation:</p> \\[ \\ddot{\\theta} + b \\dot{\\theta} + c \\sin(\\theta) = A \\cos(\\omega t) \\] <p>Where: - \\(\\theta\\) is the angular displacement. - \\(b\\) is the damping coefficient. - \\(c\\) is the gravitational restoring torque coefficient. - \\(A\\) is the amplitude of the periodic driving force. - \\(\\omega\\) is the angular frequency of the driving force.</p>"},{"location":"Mechanics/pendulum_with_damping_and_forcing/#python-code-example-simulating-and-visualizing-the-forced-damped-pendulum","title":"Python Code Example: Simulating and Visualizing the Forced Damped Pendulum","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\n# Define the forced damped pendulum equations\ndef forced_damped_pendulum(t, state, b, c, A, omega):\n    theta, omega_theta = state\n    dtheta_dt = omega_theta\n    domega_dt = -b * omega_theta - c * np.sin(theta) + A * np.cos(omega * t)\n    return [dtheta_dt, domega_dt]\n\n# Parameters\nb = 0.5  # Damping coefficient\nc = 9.8  # Restoring torque coefficient\nA = 1.2  # Amplitude of the driving force\nomega = 2.0  # Angular frequency of the driving force\n\n# Initial conditions\ninitial_state = [0.1, 0.0]  # Initial angle and angular velocity\n\n# Time span for the simulation\ntime_span = (0, 50)\ntime_eval = np.linspace(time_span[0], time_span[1], 10000)\n\n# Solve the equations\nsolution = solve_ivp(forced_damped_pendulum, time_span, initial_state, args=(b, c, A, omega), t_eval=time_eval, method='RK45')\n\n# Extract the results\ntheta, omega_theta = solution.y\n\n# Unwrap the angle for better visualization\ntheta = np.unwrap(theta)\n\n# Plot the angular displacement over time\nplt.figure(figsize=(12, 6))\nplt.plot(solution.t, theta, label=\"Angular Displacement\", color=\"blue\")\nplt.title(\"Forced Damped Pendulum: Angular Displacement Over Time\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Angular Displacement (radians)\")\nplt.grid()\nplt.legend()\nplt.savefig(\"docs/Mechanics/pic/forced_damped_pendulum_time.png\")\nplt.show()\n\n# Plot the phase plane\nplt.figure(figsize=(8, 8))\nplt.plot(theta, omega_theta, color=\"purple\")\nplt.title(\"Phase Plane of the Forced Damped Pendulum\")\nplt.xlabel(\"Angular Displacement (radians)\")\nplt.ylabel(\"Angular Velocity\")\nplt.grid()\nplt.savefig(\"docs/Mechanics/pic/forced_damped_pendulum_phase.png\")\nplt.show()\n</code></pre>"},{"location":"Mechanics/pendulum_with_damping_and_forcing/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Nonlinear Dynamics: The interaction between damping, restoring force, and driving force creates complex dynamics.</p> </li> <li> <p>Phase Space Behavior: The phase plane reveals different regimes: limit cycles, quasiperiodic orbits, and chaotic attractors.</p> </li> <li> <p>Sensitivity to Parameters: Small changes in \\(b\\), \\(c\\), \\(A\\), or \\(\\omega\\) can lead to drastically different behaviors.</p> </li> </ol>"},{"location":"Mechanics/pendulum_with_damping_and_forcing/#suggested-projects","title":"Suggested Projects","text":"<ol> <li> <p>Parameter Exploration: Investigate the effects of varying \\(A\\) and \\(\\omega\\) to explore transitions between periodic, quasiperiodic, and chaotic motion.</p> </li> <li> <p>Poincar\u00e9 Section: Visualize the system's dynamics using a Poincar\u00e9 section to identify periodic orbits and chaos.</p> </li> <li> <p>Energy Analysis: Study the energy evolution in the system and identify energy dissipation and driving force contributions.</p> </li> <li> <p>Comparison with Real Pendulums: Build a physical forced pendulum and compare its motion to the simulation.</p> </li> </ol> <p>The forced damped pendulum serves as a rich system for studying nonlinear dynamics. Experiment with the parameters and initial conditions to uncover its fascinating behaviors!</p>"},{"location":"Mechanics/predator_prey_model/","title":"Lotka-Volterra Equations (Predator-Prey Model)","text":""},{"location":"Mechanics/predator_prey_model/#overview","title":"Overview","text":"<p>The Lotka-Volterra equations are a pair of first-order, non-linear differential equations frequently used to describe the dynamics of biological systems in which two species interact, one as a predator and the other as prey.</p> <p>The equations are:</p> \\[ \\frac{dx}{dt} = \\alpha x - \\beta xy \\] \\[ \\frac{dy}{dt} = \\delta xy - \\gamma y \\] <p>Where:</p> <ul> <li>\\(x\\) is the population of the prey.</li> <li>\\(y\\) is the population of the predator.</li> <li>\\(\\alpha\\) is the growth rate of the prey.</li> <li>\\(\\beta\\) is the rate at which predators consume prey.</li> <li>\\(\\gamma\\) is the death rate of the predators.</li> <li>\\(\\delta\\) is the rate at which predators increase by consuming prey.</li> </ul>"},{"location":"Mechanics/predator_prey_model/#python-code-example-simulating-and-visualizing-the-lotka-volterra-equations","title":"Python Code Example: Simulating and Visualizing the Lotka-Volterra Equations","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\n# Define the Lotka-Volterra equations\ndef lotka_volterra(t, state, alpha, beta, gamma, delta):\n    x, y = state\n    dx_dt = alpha * x - beta * x * y\n    dy_dt = delta * x * y - gamma * y\n    return [dx_dt, dy_dt]\n\n# Parameters\nalpha = 0.1  # Prey growth rate\nbeta = 0.02  # Predator consumption rate\ngamma = 0.3  # Predator death rate\ndelta = 0.01  # Predator reproduction rate\n\n# Initial conditions\ninitial_state = [40, 9]  # Initial populations of prey and predator\n\n# Time span for the simulation\ntime_span = (0, 200)\ntime_eval = np.linspace(time_span[0], time_span[1], 1000)\n\n# Solve the Lotka-Volterra equations\nsolution = solve_ivp(lotka_volterra, time_span, initial_state, args=(alpha, beta, gamma, delta), t_eval=time_eval, method='RK45')\n\n# Extract the results\nprey, predator = solution.y\n\n# Plot the populations over time\nplt.figure(figsize=(12, 6))\nplt.plot(solution.t, prey, label=\"Prey Population\", color=\"blue\")\nplt.plot(solution.t, predator, label=\"Predator Population\", color=\"red\")\nplt.title(\"Lotka-Volterra Predator-Prey Model\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Population\")\nplt.legend()\nplt.grid()\nplt.savefig(\"docs/Mechanics/pic/lotka_volterra_time.png\")\nplt.show()\n\n# Plot the phase plane\nplt.figure(figsize=(8, 8))\nplt.plot(prey, predator, color=\"purple\")\nplt.title(\"Phase Plane of the Lotka-Volterra Model\")\nplt.xlabel(\"Prey Population\")\nplt.ylabel(\"Predator Population\")\nplt.grid()\nplt.savefig(\"docs/Mechanics/pic/lotka_volterra_phase.png\")\nplt.show()\n</code></pre>"},{"location":"Mechanics/predator_prey_model/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Oscillatory Behavior: The populations of prey and predators tend to oscillate over time, with predator peaks lagging behind prey peaks.</p> </li> <li> <p>Phase Plane: The phase plane reveals closed orbits, indicating periodic solutions depending on initial conditions.</p> </li> <li> <p>Nonlinearity: The interaction terms (\\(\\beta xy\\) and \\(\\delta xy\\)) introduce nonlinearity, leading to complex dynamics.</p> </li> </ol>"},{"location":"Mechanics/predator_prey_model/#suggested-projects","title":"Suggested Projects","text":"<ol> <li> <p>Parameter Sensitivity: Investigate how varying \\(\\alpha\\), \\(\\beta\\), \\(\\gamma\\), and \\(\\delta\\) affects the dynamics.</p> </li> <li> <p>Stability Analysis: Analyze the stability of the fixed points to understand long-term behavior.</p> </li> <li> <p>Real-World Data: Fit the Lotka-Volterra model to real-world predator-prey data to evaluate its applicability.</p> </li> <li> <p>Extensions: Add additional species or environmental factors to study more complex ecosystems.</p> </li> </ol> <p>This example provides a basic introduction to the predator-prey dynamics described by the Lotka-Volterra equations. Experiment with different parameters and initial conditions to observe the rich behavior of this classic model.</p>"},{"location":"Mechanics/three_body_problem/","title":"Three-Body Problem in a Plane","text":""},{"location":"Mechanics/three_body_problem/#overview","title":"Overview","text":"<p>The three-body problem is a classical problem in celestial mechanics that describes the motion of three masses under their mutual gravitational attraction. In the planar case, all three bodies move within a single plane.</p> <p>The equations of motion for each body are derived from Newton's law of gravitation:</p> \\[ \\ddot{\\vec{r}}_i = G \\sum_{j \\neq i} m_j \\frac{\\vec{r}_j - \\vec{r}_i}{|\\vec{r}_j - \\vec{r}_i|^3}, \\] <p>where: - \\(\\vec{r}_i\\) is the position vector of the \\(i\\)-th body. - \\(m_j\\) is the mass of the \\(j\\)-th body. - \\(G\\) is the gravitational constant.</p>"},{"location":"Mechanics/three_body_problem/#python-code-example-simulating-and-visualizing-the-planar-three-body-problem","title":"Python Code Example: Simulating and Visualizing the Planar Three-Body Problem","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\n# Define the equations of motion for the three-body problem\ndef three_body_equations(t, state, G, m1, m2, m3):\n    r1 = state[:2]\n    r2 = state[2:4]\n    r3 = state[4:6]\n    v1 = state[6:8]\n    v2 = state[8:10]\n    v3 = state[10:12]\n\n    # Distances between bodies\n    r12 = np.linalg.norm(r2 - r1)\n    r13 = np.linalg.norm(r3 - r1)\n    r23 = np.linalg.norm(r3 - r2)\n\n    # Accelerations\n    a1 = G * m2 * (r2 - r1) / r12**3 + G * m3 * (r3 - r1) / r13**3\n    a2 = G * m1 * (r1 - r2) / r12**3 + G * m3 * (r3 - r2) / r23**3\n    a3 = G * m1 * (r1 - r3) / r13**3 + G * m2 * (r2 - r3) / r23**3\n\n    return np.concatenate([v1, v2, v3, a1, a2, a3])\n\n# Parameters\nG = 1.0  # Gravitational constant\nm1, m2, m3 = 1.0, 1.0, 1.0  # Masses of the three bodies\n\n# Initial positions and velocities (in the plane)\ninitial_positions = [\n    [0.5, 0.0],  # Body 1\n    [-0.5, 0.0],  # Body 2\n    [0.0, 0.5],   # Body 3\n]\ninitial_velocities = [\n    [0.0, 0.1],  # Body 1\n    [0.0, -0.1],  # Body 2\n    [-0.1, 0.0],  # Body 3\n]\n\n# Flatten initial conditions\ninitial_state = np.concatenate([\n    np.array(initial_positions).flatten(),\n    np.array(initial_velocities).flatten()\n])\n\n# Time span for the simulation\ntime_span = (0, 10)\ntime_eval = np.linspace(time_span[0], time_span[1], 1000)\n\n# Solve the equations\nsolution = solve_ivp(\n    three_body_equations, time_span, initial_state, args=(G, m1, m2, m3),\n    t_eval=time_eval, method='RK45'\n)\n\n# Extract the results\nr1 = solution.y[:2].T\nr2 = solution.y[2:4].T\nr3 = solution.y[4:6].T\n\n# Plot the trajectories\nplt.figure(figsize=(10, 10))\nplt.plot(r1[:, 0], r1[:, 1], label=\"Body 1\", color=\"blue\")\nplt.plot(r2[:, 0], r2[:, 1], label=\"Body 2\", color=\"red\")\nplt.plot(r3[:, 0], r3[:, 1], label=\"Body 3\", color=\"green\")\nplt.scatter(initial_positions[0][0], initial_positions[0][1], color=\"blue\", marker=\"o\")\nplt.scatter(initial_positions[1][0], initial_positions[1][1], color=\"red\", marker=\"o\")\nplt.scatter(initial_positions[2][0], initial_positions[2][1], color=\"green\", marker=\"o\")\nplt.title(\"Three-Body Problem Trajectories\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend()\nplt.grid()\nplt.savefig(\"docs/Mechanics/pic/three_body_problem.png\")\nplt.show()\n</code></pre>"},{"location":"Mechanics/three_body_problem/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Nonlinearity and Chaos: The three-body problem is highly nonlinear and exhibits sensitive dependence on initial conditions, leading to chaotic trajectories.</p> </li> <li> <p>Unpredictability: Long-term predictions of the bodies' positions are inherently limited by numerical precision and initial condition accuracy.</p> </li> <li> <p>Conservation Laws: The system conserves total energy and angular momentum, providing useful checks for numerical simulations.</p> </li> </ol>"},{"location":"Mechanics/three_body_problem/#suggested-projects","title":"Suggested Projects","text":"<ol> <li> <p>Energy Conservation: Calculate and verify the conservation of total energy throughout the simulation.</p> </li> <li> <p>Initial Condition Sensitivity: Explore how small changes in initial positions or velocities affect the trajectories.</p> </li> <li> <p>Visualization Enhancements: Create interactive 3D visualizations or add color coding for time progression.</p> </li> <li> <p>Symmetrical Configurations: Investigate special cases such as equilateral triangle orbits and their stability.</p> </li> </ol> <p>The planar three-body problem is a rich source of nonlinear dynamics and chaos. Experiment with different initial conditions and parameters to explore its fascinating behaviors!</p>"},{"location":"Modern_Physics/Cosmology/","title":"Cosmology","text":""},{"location":"Modern_Physics/Quantum_physics/","title":"Quantum Physics","text":""}]}