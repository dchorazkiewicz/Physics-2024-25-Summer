---
title: Mechanics
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 3
    page-layout: full
    grid:
      body-width: 1000px
      sidebar-width: 300px
      margin-width: 300px
      gutter-width: 2rem
    theme:
      light: [flatly, custom.scss]
      dark: [darkly, custom.scss]
    self-contained: true
---

## Differential equations

### Starting example

Let's consider the first order differential equation

$$
\frac{dy(x)}{dx} = 2x
$$

Let us think how we should read this equation. The left hand side is the derivative of the function $y(x)$ with respect to $x$. This derivative is equal to 3. This means that the slope of the function $y(x)$ is constant and equal to 3. This is a simple differential equation that can be solved by integration. The solution is

$$
y(x) = x^2 + C
$$

where $C$ is an integration constant. This is the general solution of the differential equation. The solution is not unique because the constant $C$ can take any value. The solution is a straight line with slope 3. The constant $C$ determines the position of the line in the $y$-axis.

```{python}
import numpy as np
import matplotlib.pyplot as plt

def y(x, C):
    return x**2 + C

x = np.linspace(0, 10, 100)

fig, ax = plt.subplots(figsize=(6, 4))

for C in range(-10, 10, 1):
    plt.plot(x, y(x, C), label=f'C={C}')

plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

#### Check in geogebra:

* f(x) =    x^2 + 3

##### Numerical solution

Remember that derivatives can be approximated by finite differences. The derivative of a function $f(x)$ can be approximated by

$$
\frac{df(x)}{dx} \approx \frac{f(x + h) - f(x)}{h}
$$

where $h$ is a small number. This is a simple way to approximate the derivative of a function. Let's use this approximation to solve the differential equation

$$
\frac{dy(x)}{dx} = 2x
$$

We can approximate the derivative by

$$
\frac{y(x + h) - y(x)}{h} = 2x
$$

This equation can be solved for $y(x + h)$

$$
y(x + h) = y(x) + 2xh
$$

This equation can be used to solve the differential equation numerically. We can start from an initial value of $y(x)$ and use the equation above to calculate the value of $y(x + h)$. This value can be used to calculate the next value of $y(x + 2h)$ and so on. This is a simple numerical method to solve differential equations.

Let us compare the numerical solution with the analytical solution.

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Define the derivative dy/dx
def dy_dx(x):
    return 2 * x

# Define the exact analytical solution y(x) for comparison
def y_analytical(x):
    return x**2

# Define a numerical solution for y(x) using the forward Euler method
def y_numerical(x, h):
    y = [0]  # Initialize y with the starting value, assuming y(0) = 0
    for i in range(len(x) - 1):
        y.append(y[-1] + dy_dx(x[i]) * h)  # Update y using dy/dx
    return y

# Set up the x values
plot_x = np.linspace(0, 10, 100)
x = np.linspace(0, 10, 10)
h = x[1] - x[0]  # Step size

# Compute the difference between analytical and numerical solutions
difference = y_analytical(x) - np.array(y_numerical(x, h))

# Set up the figure with two subplots
fig, axs = plt.subplots(2,1, figsize=(10,8))

# Left plot: Analytical and numerical solutions
axs[0].plot(plot_x, y_analytical(plot_x), label='Analytical', linestyle='dashed', linewidth=2)
axs[0].scatter(x, y_numerical(x, h), label='Numerical', linestyle='solid', color='red')
axs[0].set_title('Analytical vs Numerical')
axs[0].set_xlabel('x')
axs[0].set_ylabel('y')
axs[0].legend()

# Right plot: Difference between solutions
axs[1].scatter(x, difference, label='Difference', color='red')
axs[1].set_title('Difference (Analytical - Numerical)')
axs[1].set_xlabel('x')
axs[1].set_ylabel('Difference')
axs[1].legend()

# Adjust layout and show the plots
plt.tight_layout()
plt.show()

```

Difference between the analytical and numerical solutions depends on the step size $h$. 

### Second order differential equations

Let's consider the second order differential equation

$$
\frac{d^2y(x)}{dx^2} = -y(x)
$$

This is a simple differential equation that can be solved by integration. The solution is

$$
y(x) = A \sin(x) + B \cos(x)
$$

where $A$ and $B$ are integration constants. This is the general solution of the differential equation. The solution is not unique because the constants $A$ and $B$ can take any value. The solution is a sinusoidal function. The constants $A$ and $B$ determine the amplitude and phase of the sinusoidal function.

#### Numerical solution

From Taylor's theorem, we know that the second derivative of a function $f(x)$ can be approximated by

$$
f(x + h) = f(x) + h \frac{df(x)}{dx} + \frac{h^2}{2} \frac{d^2f(x)}{dx^2} + \ldots
$$

also

$$
f(x - h) = f(x) - h \frac{df(x)}{dx} + \frac{h^2}{2} \frac{d^2f(x)}{dx^2} + \ldots
$$

adding these two equations we get

$$
f(x + h) + f(x - h) = 2 f(x) + h^2 \frac{d^2f(x)}{dx^2}
$$

so we can approximate the second derivative by

$$
\frac{f(x + h) + f(x - h) - 2 f(x)}{h^2} \approx \frac{d^2f(x)}{dx^2}
$$

Let's use this approximation to solve the differential equation

$$
\frac{d^2y(x)}{dx^2} = -y(x)
$$

We can approximate the second derivative by

$$
\frac{y(x + h) + y(x - h) - 2 y(x)}{h^2} = -y(x)
$$

This equation can be solved for $y(x + h)$

$$
y(x + h) = 2 y(x) - y(x - h) - h^2 y(x)
$$

This equation can be used to solve the differential equation numerically. We can start from an initial value of $y(x)$ and $y(x - h)$ and use the equation above to calculate the value of $y(x + h)$. This value can be used to calculate the next value of $y(x + 2h)$ and so on. This is a simple numerical method to solve differential equations.

Let us compare the numerical solution with the analytical solution.

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Define the second derivative d^2y/dx^2
def d2y_dx2(x):
    return -x

# Define the exact analytical solution y(x) for comparison
def y_analytical(x):
    return -np.sin(x)

# Define a numerical solution for y(x) using the forward Euler method
def y_numerical(x, h):
    y = [0, np.sin(-h)]  # Initialize y with the starting values, assuming y(0) = 0 and y(-h) = sin(-h)
    for i in range(1, len(x) - 1):
        y.append(2 * y[-1] - y[-2] - h**2 * y[-1])  # Update y using d^2y/dx^2
    return y

# Set up the x values
plot_x = np.linspace(0, 10, 100)
x = np.linspace(0, 10, 20)
h = x[1] - x[0]  # Step size

# Compute the difference between analytical and numerical solutions
difference = y_analytical(x) - np.array(y_numerical(x, h))

# Set up the figure with two subplots
fig, axs = plt.subplots(2,1, figsize=(10,8))

# Left plot: Analytical and numerical solutions
axs[0].plot(plot_x, y_analytical(plot_x), label='Analytical', linestyle='dashed', linewidth=2)
axs[0].scatter(x, y_numerical(x, h), label='Numerical', color='red')
axs[0].set_title('Analytical vs Numerical')
axs[0].set_xlabel('x')

axs[0].set_ylabel('y')
axs[0].legend()

# Right plot: Difference between solutions
axs[1].scatter(x, difference, label='Difference')
axs[1].set_title('Difference (Analytical - Numerical)')
axs[1].set_xlabel('x')
axs[1].set_ylabel('Difference')
axs[1].legend()

# Adjust layout and show the plots
plt.tight_layout()
plt.show()
```

## Description of motion

### Movement in 2D Cartesian coordinates

We could start considering moving particle in 1D but 2D examples are more interesting.
First we have to define the position of the particle in 2D Cartesian coordinates. 
The position of the particle is given by the vector $\mathbf{r} = (x, y)$, where $x$ and $y$ are the coordinates of the particle in the $x$ and $y$ axes, respectively. If this coordinates are functions of time, we can write the position vector as $\mathbf{r}(t) = (x(t), y(t))$. This function describes the trajectory of the particle in the $xy$ plane.

$$
[a,b]\rightarrow \mathcal{R}^2:
t\rightarrow \mathbf{r}(t) = (x(t), y(t))
$$

##### Python example

```{python}
import numpy as np
import matplotlib.pyplot as plt

def r1(t):
    return np.array([t, -t**2 + t])

def r2(t):
    return np.array([np.cos(t), np.sin(t)])

t = np.linspace(0, 10, 100)

fig, axes = plt.subplots(nrows=2, figsize=(8, 6))  # Tworzymy dwa wykresy obok siebie

# Pierwszy wykres
axes[0].plot(r1(t)[0], r1(t)[1])
axes[0].set_xlabel('x')
axes[0].set_ylabel('y')
axes[0].set_title('Wykres 1: r1(t)')

# Drugi wykres
axes[1].plot(r2(t)[0], r2(t)[1])
axes[1].set_xlabel('x')
axes[1].set_ylabel('y')
axes[1].set_title('Wykres 2: r2(t)')

plt.tight_layout()  # Dostosowanie uk≈Çadu
plt.show()

```

##### Geogebra example

* c1 = Curve[t, -t^2+t, t, 0, 10]
* c2 = Curve[cos(t), sin(t), t, 0, 2*pi]
* s = Slider[0,10,.001]
* P = (x(c1(s)),y(c1(s)))
* Q = (x(c2(s)),y(c2(s)))

where

* c1 is a curve $t\rightarrow (t, -t^2+t)$
* c2 is a curve $t\rightarrow (\cos(t), \sin(t))$
* s is a slider from 0 to 10
* P is a point on c1
* Q is a point on c2


Check additional examples in geogebra:

* a=Slider[1,10,1]
* b=Slider[1,10,1]
* Curve[cos(a*t), b*sin(t), t, 0, 20*pi]

Compare following curves:

* Curve[t,t,0,10]
* Curve[t^2,t^2,0,sqrt(10)]
* Curve[t^3,t^3,0,10^(1/3)]

In geberal when we create any curve in Geogebra we can create additional point which will
be moving along the curve. This is very useful to visualize the motion of the particle.

### Velocity

The velocity of the particle is the derivative of the position vector with respect to time. The velocity vector is defined as

$$
\mathbf{v}(t) = \frac{d\mathbf{r}(t)}{dt} = \left(\frac{dx(t)}{dt}, \frac{dy(t)}{dt}\right)
$$

The velocity vector describes the speed and direction of the particle at any time $t$. The magnitude of the velocity vector is the speed of the particle. The direction of the velocity vector is the direction of motion of the particle.

```{python}
import numpy as np
import matplotlib.pyplot as plt

def r(t):
    return np.array([t, -t**2 + t])

def v(t):
    return np.array([1, -2*t + 1])

t = np.linspace(0, 10, 100)

fig, axes = plt.subplots(figsize=(8, 6))

# whole curve
axes.plot(r(t)[0], r(t)[1], label='r(t)')

# velocity vector at t=3
axes.quiver(r(3)[0], r(3)[1], v(3)[0], v(3)[1], angles='xy', scale_units='xy', scale=1, color='red', label='v(3)')
axes.text(r(3)[0] + v(3)[0], r(3)[1] + v(3)[1], 'v(3)', color='red')
#velocity vector at t=6
axes.quiver(r(6)[0], r(6)[1], v(6)[0], v(6)[1], angles='xy', scale_units='xy', scale=1, color='blue', label='v(6)')
axes.text(r(6)[0] + v(6)[0], r(6)[1] + v(6)[1], 'v(6)', color='blue')

axes.set_xlabel('x')
axes.set_ylabel('y')
axes.legend()
plt.show()
```

we can realze that the in geogebra

* c1 = Curve[t, -t^2+t, t, 0, 10]
* v1 = Derivative[c1]
* s = Slider[0,10,.001]
* P = (x(c1(s)),y(c1(s)))
* vel = Vector[P,P+v1(s)]

where

* c1 is a curve $t\rightarrow (t, -t^2+t)$
* v1 is a velocity function
* s is a slider from 0 to 10
* P is a point on c1
* vel is a velocity vector
